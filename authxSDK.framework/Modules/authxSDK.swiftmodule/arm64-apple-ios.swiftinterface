// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name authxSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Alamofire
import CertificateSigningRequest
import CommonCrypto
import DeveloperToolsSupport
import Foundation
import JOSESwift
import LocalAuthentication
import Localize_Swift
import Security
import SwCrypt
import Swift
import SwiftKeychainWrapper
import SwiftUI
import SwiftyJSON
import Toast_Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import authxSDK
@_hasMissingDesignatedInitializers public class Localizator {
  @objc deinit
}
public typealias actionHandler = (_ status: Swift.Bool, _ message: Swift.String) -> ()
public typealias resultHandler = (_ statusCode: Swift.Int, _ message: Swift.String) -> ()
public typealias sessionTokenHandler = (_ statusCode: Swift.Int, _ message: Swift.String, _ sessionToken: Swift.String, _ refreshToken: Swift.String) -> ()
public typealias completionHandler = (_ message: Swift.String?, _ error: (any Swift.Error)?, _ statusCode: Swift.Int?) -> ()
public var authenticator: authxSDK.UnlockMode
public var selectedAuthenticationMode: authxSDK.AuthenticationMode
public var selectedAuthenticationType: authxSDK.AuthenticationType
public var rulesMode: authxSDK.RulesMode
public enum UnlockMode : Swift.String {
  case TouchID
  case faceID
  case Pin
  case None
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AuthenticationMode : Swift.Int, Swift.Codable {
  case keyStoreAuthenticated
  case keyStoreOnly
  case hybrid
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AuthenticationType : Swift.Int, Swift.Codable {
  case biometricOnly
  case pinPatternOnly
  case biometricPinPatern
  case deviceAuthenticator
  case hybrid
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum RulesMode : Swift.Int, Swift.Codable {
  case KSPB
  case KSUB
  case KSPP
  case KSA
  case KSC
  case KSPT
  case KSPF
  case NONE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class AuthXSDK {
  public static func proceedWithAuthenticatorType(completion: @escaping authxSDK.resultHandler)
  public static func initSDK(clientData: authxSDK.ClientData, authenticationMode: authxSDK.AuthenticationMode, authenticationType: authxSDK.AuthenticationType)
  public static func isUserRegistered() -> Swift.Bool
  public static func proceedWithEnrolling(userData: Swift.String, completion: @escaping authxSDK.resultHandler)
  public static func proceedWithEnrollmentProcessWithQRKey(userData: Swift.String, qrKey: Swift.String, completion: @escaping authxSDK.resultHandler)
  public static func proceedWithAuthentication(completion: @escaping authxSDK.resultHandler)
  public static func proceedWithAuthenticationWithQRKey(qrKey: Swift.String, completion: @escaping authxSDK.resultHandler)
  public static func proceedWithNotifications(userInfo: [Swift.AnyHashable : Any])
  public static func proceedWithNotificationPresentingType(userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  public static func proceedWithSessionTokenGet(completion: @escaping authxSDK.sessionTokenHandler)
  public static func proceedWithSessionTokenVerify(completion: @escaping authxSDK.sessionTokenHandler)
  public static func cleanVehicle()
  @objc deinit
}
public struct ClientData : Swift.Codable {
  public init(clientID: Swift.String, Serial: Swift.String, channelID: Swift.String, backgroundColor: Swift.String?, textColor: Swift.String?, userName: Swift.String, displayName: Swift.String, userPass: Swift.String, language: Swift.String? = "en-US")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension authxSDK.UnlockMode : Swift.Equatable {}
extension authxSDK.UnlockMode : Swift.Hashable {}
extension authxSDK.UnlockMode : Swift.RawRepresentable {}
extension authxSDK.AuthenticationMode : Swift.Equatable {}
extension authxSDK.AuthenticationMode : Swift.Hashable {}
extension authxSDK.AuthenticationMode : Swift.RawRepresentable {}
extension authxSDK.AuthenticationType : Swift.Equatable {}
extension authxSDK.AuthenticationType : Swift.Hashable {}
extension authxSDK.AuthenticationType : Swift.RawRepresentable {}
extension authxSDK.RulesMode : Swift.Equatable {}
extension authxSDK.RulesMode : Swift.Hashable {}
extension authxSDK.RulesMode : Swift.RawRepresentable {}
